<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Decorator - 标签 - 芋头乱炖，一只普通程序员的自留地</title>
        <link>http://example.org/tags/decorator/</link>
        <description>Decorator - 标签 - 芋头乱炖，一只普通程序员的自留地</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 26 Oct 2017 22:36:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/decorator/" rel="self" type="application/rss+xml" /><item>
    <title>JS 装饰器（Decorator）场景实战</title>
    <link>http://example.org/posts/js-decorator-code/</link>
    <pubDate>Thu, 26 Oct 2017 22:36:00 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/js-decorator-code/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/js-decorator-code/cover.jpeg" referrerpolicy="no-referrer">
            </div>本文不会大篇幅介绍装饰器（Decorator）的概念和基础用法，核心介绍我们团队如何将装饰器应用于实际开发，和一些高级用法的实现。 装饰器简介 Decorator 是 ES7 的一个新语法，正如其“装饰器”的叫法所表达的，他可以对一些对象进行装饰包装然后返回一个被包装过的对象，可以装饰的对象包括：类，属性，方法等。Decorator 的写法与 Java 里的注解（Annotation）非常类似，但是一定不要把 JS 中的装饰器叫做是“注解”，因为这两者的原理和实现的功能还是有所区别的，在 Java 中，注解主要是对某个对象进行标注，然后在运行时或者编译时，可以通过例如反射这样的机制拿到被标注的对象，对其进行一些逻辑包装。而 Decorator 的原理和作用则更为简单，就是包装对象，然后返回一个新的对象描述（descriptor），其作用也非常单一简单，基本上就是获取包装对象的宿主、键值几个有限的信息。 关于 Decorator 的详细介绍参见文章： zhuanlan.zhihu.com/F]]></description>
</item></channel>
</rss>
