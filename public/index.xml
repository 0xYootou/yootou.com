<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>芋头乱炖，一只普通程序员的自留地</title>
        <link>http://example.org/</link>
        <description>芋头乱炖，一只普通程序员的自留地</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 06 Jan 2022 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>ABOUT ME 关于我</title>
    <link>http://example.org/posts/about-me/</link>
    <pubDate>Sat, 27 Nov 2021 22:07:07 &#43;0800</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/about-me/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/aboutme/cover2.jpeg" referrerpolicy="no-referrer">
            </div>]]></description>
</item><item>
    <title>Arduino LED 频谱仪 #2 音频传感器选择</title>
    <link>http://example.org/posts/fft-2/</link>
    <pubDate>Thu, 06 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://example.org/posts/fft-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/fft-2/IMG_6475.JPG" referrerpolicy="no-referrer">
            </div>本系列文章将带着大家一起简单了解如何制作一个音频频谱显示的 arduino 小作品。 最终效果： 前一篇：#1 arduino 芯片选择 特别注意 今天跟大家分享下关于音频采集和频域分析的过程，也比较简单，不过相比于网上很多示例来说，至少是真的 run 起来了，之前我在网上看到很多文章和示例代码，实际上都非常浅，也基本上很难跑起来，所以也趟了不少坑。 另外我在这个环节趟过的最大的坑是电气隔离的坑，因为麦克风采集的电信号非常微弱，所以它很容易被电路干扰，实际上玩 hifi 的同学应该对相关的经验比较了解，按理说我也是个 hifi 玩家，应该比较早想到这个问题的，但是我的确忽略了，因为调了很久电路，一直达不到自己想要的结果，而且差异很大，后来突然想起来这回事，把电路做了隔离才ok的。 另外就是关于元器件的运行电压，例如今天要讲的麦克风传感器，官方规格描述是要低于3.3v电压，否则容易损坏，所以不能直接接入usb的5v电压。 音频采集 说到音频采集，最重要的当然是麦克风]]></description>
</item><item>
    <title>Arduino LED 频谱仪 #1 arduino 芯片选择</title>
    <link>http://example.org/posts/arduino-fft-fastled/</link>
    <pubDate>Wed, 05 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://example.org/posts/arduino-fft-fastled/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/Arduino%20%E9%9F%B3%E9%A2%91%E7%9B%92%E5%AD%90%E5%88%B6%E4%BD%9C%20%231%20arduino%20%E8%8A%AF%E7%89%87%E9%80%89%E6%8B%A9/IMG_6479.JPG" referrerpolicy="no-referrer">
            </div>本系列文章将带着大家一起简单了解如何制作一个音频频谱显示的 arduino 小作品。 最终效果： 此小产品涉及到以下功能： 音频采集 音频傅立叶变化 fastled 驱动 led 板 时间显示及其他动效 亮度和灵敏度调节 亚克力盒子制作 主要涉及以下芯片： arduino 芯片，我们选择 esp32。 音频传感器， WS2812B 8*32 芯片 2 位数码管 INMP441 全向麦克风 旋转编码器和旋钮盖 面包板和杜邦线、插线柱等等若干 电烙铁和焊锡 亚克力板 3mm 以上厚度若干，立柱若干、半透亚克力板 1mm 若干 稍后我会一一介绍为什么选择这些元件以及如何购买比较划算。 以下是半成品 第一部分 arduino 芯片选择 Arduino 芯片有很多类型，一般入门用的都是 uno，功能简单，但是便宜，不过我一般不使用 arduino uno，主要是 uno 主频很低，处理稍微复杂一些的场景就性能不足，另外就是也没有联网之类的功能，另外也缺少一些端口，我之前做物联网应用的时候，用的是 esp8266 芯片，其技术参数见： https://www.espressif.com/sites/default/files/documentation/esp8266-technical_reference_cn.pdf 单核处理器，运行频率为 80MHz 802.11 b/g/n Wi-Fi Direct (P2P)、soft-AP 内置 TCP/IP 协议栈 内置 TR 开关、ba]]></description>
</item><item>
    <title>TypeScript 类型小甜点</title>
    <link>http://example.org/posts/typescript_type_tip/</link>
    <pubDate>Tue, 04 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://example.org/posts/typescript_type_tip/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/TypeScript_type_tip/cover.png" referrerpolicy="no-referrer">
            </div>TypeScript 的类型是非常复杂的，虽然日常大家经常用到的无非是那几个简单的 type interface 之类的，但是你打开某些知名的 js lib 的源码，有时候会发现一些非常复杂的类型定义，今天简单分享个我之前写 colors-web 的时候定义的一个类型，其实很简单。 首先，我们看下需求： 现有一个 class，他的方法是运行时动态赋予的，可能会有一百多个方法 如 Color 类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Color { styles = []; constructor() {} color(colorValue} { this.styles.push(&#39;color:&#39;+colorValue); return this; } bgColor(colorValue) { this.styles.push(&#39;background-color:&#39;+colorValue); return this; } } const cssColors = [&#39;red&#39;,&#39;green&#39;,&#39;yello&#39;...] // 这里定义所有的 css 标准颜色名称，供146个 // 将 colors 变成 Color 的实例方法 const ColorFactory = ()=&gt; { const instance = new Color(); cssColors.forEach((color) =&gt; { Object.defineProperty(inst, color, { get() { this.styles.push(`color:${color};`); return this; }, }); Object.defineProperty(inst, color + &#34;Bg&#34;, { get() { this.styles.push(`background:${color};`); return this; }, }); }); } 需求是通过 d.ts 定义以上方法的类型。 实现 本文只提供一种实现思路，实际上这个需求应该还可以有其他实现方式，只是我对 ts 的理解还没有太深入 基本类型 首先，我们先把 Color 类本身的类型定义好。 1. 定义好 cssColors 类型，Color 类的参数和后续的方法都依赖这个基本的类型定义 1 2 3 4 5]]></description>
</item><item>
    <title>GOODBYE 2021, HELLO 2022</title>
    <link>http://example.org/posts/2021-year-report/</link>
    <pubDate>Fri, 31 Dec 2021 23:59:59 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/2021-year-report/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/2021-year/cover.png" referrerpolicy="no-referrer">
            </div>多年没写年终总结了，原因很多，我感觉比较重要的原因是因为随着年纪的增长，在生活或者工作上，都很难有新鲜的从 0 到 1 的事情总结和汇报，而 2021 年突然想写的原因，也是如此，因为有一些新鲜的事情想要总结和汇报。 2009 年年中的时候进入了前端的行业，至今已经 12 年了，不短，也不长，路依然很远，我依然很嫩，劲头依然很足，要学习的东西依然很多，而随着时间的推移，我觉得最重要的是事情想的越来越清楚，我和技术的关系，我和工作的关系，我和家庭的关系，我和世界的关系，而随着这些事情想的越来越清楚，我觉得最重要的影响是，依然对技术、工作、家庭、世界充满了热情和好奇，不犹豫，不彷徨，不违心。 换工作 2020 年年底的时候，我从大搜车离职了，离职的前一个月，我还跟同事喝酒的时候吹牛，我说我不会离职，而且我可能是在大搜车坚守到最后的人，说出这句话的本意是我对大搜车真的充满了热爱，对公司本身，对自己的团队，对我共事过的很多人，我付出了太多感情]]></description>
</item><item>
    <title>以太坊小示例和基本概念</title>
    <link>http://example.org/posts/eth_simple_example/</link>
    <pubDate>Sat, 25 Dec 2021 00:00:00 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://example.org/posts/eth_simple_example/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/eth/cover.png" referrerpolicy="no-referrer">
            </div>声明：市场有风险，投资需谨慎，币圈骗子多，一定要小心，违法的事不要做，违法的人不结识，仅供学习，致力于用区块链技术打造和谐社会。 本文所涉及的项目代码： https://github.com/yu-tou/eth-self-token-example 在以太坊发布自己的 token 代码示例 1 2 3 yarn install # 启动本地网络 yarn chain token 代码在 ./contracts，其中 YuTou.sol 是 token 合约，YuTouMintable 是发币合约 编辑合约后，部署脚本在 deploy/00_deploy_your_contract.js，如合约名有变化则修改 1 2 3 # 部署到本地网络 yarn deploy 执行成功后终端，有合约地址，将地址导入钱包，即可看到 token 钱包使用测试网络连接合约后可以获取自己的一个地址，接下去向地址发 token 修改合约地址和账户地址，在 scripts/mint.js 中 1 2 # 发币到自己的账户 yarn mint 以太坊概念教程 1. 以太坊基础概念 1.1 比特币 BTC &amp; 以太坊 Ethereum 比特币：价值工具。 以太坊：分布式应用平台。 1.2 智能合约 contract 智能合约（Smart contract ）是一种旨在以信息化方式传播、验证或执行合同的计算机协议。智能合约允许]]></description>
</item><item>
    <title>Prisma &#43; NestJs &#43; GraphQL 表现层应用开发</title>
    <link>http://example.org/posts/prisma-nestjs-graphql/</link>
    <pubDate>Mon, 20 Dec 2021 23:59:59 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/prisma-nestjs-graphql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/Nodejs/cover.jpg" referrerpolicy="no-referrer">
            </div>介绍 本文 github 项目地址：https://github.com/yu-tou/nestjs-prisma-example 这是一个 prisma + nestjs + graphql 的集成示例 对于开发者来说，特别是使用 graphql 的时候，只需要写非常少量的代码即可完成数据的各种操作，同时也支持接口透传。 开发&amp;部署 本地开发 npm run start:dev swagger 地址：http://localhost:3001/swagger graphql playground：http://localhost:3001/index.html 核心能力 1. prisma 集成 prisma 接管数据模型定义 prisma 提供 orm 数据操作 prisma 提供数据订正和管理 2. graphql 集成 prisma-nestjs-graphql 提供 prisma 数据模型到 graphql 类型的转换 使用 nestjs 内置的代码优先模式，使用生成的类型提供 graphql 模型 使用 graphql 模型 + orm，自动通过 resolver 提供给前端访问接口 此方案中，普通和高级的增删改查基本不需要自己增加代码 3. restful api proxy 通过 swagger-to-graphql 将 openapi 接口通过 oas 文档直接转换为 graphql 定义 通过 graphqlHTTP 将请求代理到 restful 接口 此方案中，swagger 的描述无缝转换到]]></description>
</item><item>
    <title>如何在浏览器 console 控制台中播放视频？</title>
    <link>http://example.org/posts/display-video-in-console/</link>
    <pubDate>Thu, 30 Sep 2021 23:17:00 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/display-video-in-console/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/display-video-in-console/cover.jpeg" referrerpolicy="no-referrer">
            </div>如何在浏览器 console 控制台中播放视频？ 要实现这个目标，主要涉及到这几个点： 如何获取和解析视频流？ 如何在 console 里播放动态内容？ 如何在 console 里播放彩色内容？ 如何连接视频流和 console？ 事实上最后的代码极其简单，我们就一步一步简单讲一下 效果 测试地址：https://yu-tou.github.io/colors-web/dist/camera.html 如何获取和解析视频流？ 这里我们用电脑摄像头捕获视频流，然后获取视频流每一帧的图像数据，作为下一步的输入。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 捕捉电脑摄像头的视频流 const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true, }); // 创建一个 video 标签 const video = document.createElement(&#34;video&#34;); document.body.appendChild(video); video.onloadedmetadata = function (e) { video.play(); // 等摄像头数据加载完成后，开始播放 }; // video 标签播放视频流 video.srcObject = mediaStream; 如何获取每一帧图像的数据？创建一个 canvas 画布，可以将 video 当前的内容绘制到画布上，然后通过 canvas 的方法即可拿到图像的像素数据。 1 2 3 4 5 6 7 8 const ctx = canvas.getContext(&#34;2d&#34;); canvas.width = width; canvas.height = height; ctx.drawImage(video, 0, 0, width, height); const imageData = ctx.getImageData(0, 0, width, height); const data = imageData.data; // imageData 的]]></description>
</item><item>
    <title>Mysql 8.0 中存储 gis 数据的正确姿势</title>
    <link>http://example.org/posts/mysql8-gis-srid/</link>
    <pubDate>Sun, 01 Aug 2021 23:17:00 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/mysql8-gis-srid/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/mysql8-gis-srid/cover.jpg" referrerpolicy="no-referrer">
            </div>请为列指定 SRID 如果你想要在使用一些 spatial function 的时候获得尽可能精确的值，请务必为您的数据库中的 geometry 列指定 SRID，如 st_area st_distance 等。否则您将获得直角坐标上的距离，而不是真实的值，另外在 mysql 老版本中，不指定 SRID（默认为 0），可以使用某些计算函数，但是在 mysql 中，某些函数必须指定 SRID，也要求被计算的列必须指定 SRID。 什么是 SRID？ SRID 指定的是 spatial 数据的坐标系，地理数据中一个最重要的指标就是坐标系，没有坐标系，就不存在经纬度，不存在投影，不存在地心，不存在真实距离，一切将会变为平面坐标，与真实地理信息天差地别。 SRID 坐标系定义了什么？ 简单来说，这里不展开，坐标系定义了，大地水准面 -&gt; 椭球体 -&gt; 大地基准面，他们分别是海平面、地球形状和球心、球心偏移等，在每个尺度和地区，这些值都在发生变化，所以会定义不同的坐标系，以尽量消除误差。 最常用的 SRID 是什么？ 在服务端，通常存储数据都是使用 4326 的 SRID，在前端，地图渲染使用 3857 坐标系（代表]]></description>
</item><item>
    <title>分享：地理可视化，不止于炫酷</title>
    <link>http://example.org/posts/dilikeshihua/</link>
    <pubDate>Thu, 15 Jul 2021 15:14:00 &#43;0000</pubDate><author>
        <name>芋头</name>
    </author><guid>http://example.org/posts/dilikeshihua/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/%e5%9c%b0%e7%90%86%e5%8f%af%e8%a7%86%e5%8c%96,%e4%b8%8d%e6%ad%a2%e4%ba%8e%e7%82%ab%e9%85%b7/cover.jpeg" referrerpolicy="no-referrer">
            </div>本博文内容来自于七月份的一个分享，主要内容是介绍地理可视化中的坐标参考系相关的概念。]]></description>
</item></channel>
</rss>
